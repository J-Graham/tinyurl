 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var mongodb = require('mongodb');
var app = express();
var connected=false;
var datastore = require("./datastore").sync;
datastore.initializeApp(app);

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
      initializeDatastoreOnProjectCreation();
		  res.sendFile(process.cwd() + '/views/index.html');
    })
//{"original_url":"https://www.google.com","short_url":"https://little-url.herokuapp.com/6249"}
app.route('/new/*').get(function (req, res) {
  var url = req.path.substr(req.path.indexOf('/')+5);
  if (isURL(url)){
   var ret = createUrl(url);
    console.log('res',ret.ops[0]._id);
    res.setHeader('Content-Type', 'application/json');
    return  res.json(insertRet(ret));
  }else{
    var ret = {};
    ret.msg = "Url not in the correct format";
     res.setHeader('Content-Type', 'application/json');
    return  res.json(ret);
  }
  
});

app.get('/:urlId', function (req, res) {
  var urlId = req.params.urlId;
  var retUrl = datastore.getId(urlId)
  if (retUrl==null){
      var ret = {};
    ret.msg = "No Domain Found";
     res.setHeader('Content-Type', 'application/json');
    return  res.json(ret);
  }else{
    return res.redirect(retUrl);
  }
});

function insertRet(res){
  var ret = {};
  ret.original_url = res.ops[0].url;
  ret.short_url = "https://jgtinyurl.glitch.me/" + res.ops[0]._id;
  return ret;
}

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

function isURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|'+ // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
  '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
  return pattern.test(str);
}


function createUrl(url){
    try {
    // Get the existing posts from the MongoDB and put it into an array called posts
    var shortUrls = [];
    // We get the contents of the submitted form and append it to the posts array
      
    shortUrls.push({
      _id: getRandomInt(0,10000),
      url: url}); // the form data is in request.body because we're using the body-parser library to help make dealing with requests easier
    // We store the updated posts array back in our database posts entry
    var res= datastore.set("shortUrls", shortUrls);
    // And then we redirect the view back to the homepage
      console.log('res', res)
    return res
  } catch (err) {
    console.log(err);
    throw err;
  }
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    console.log(err)
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})



app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

function initializeDatastoreOnProjectCreation() {
  if(!connected){
    connected = datastore.connect();
  }
  if (!datastore.get("initialized")) {
    datastore.set("shortUrls", []);
    datastore.set("initialized", true);
  }  
}